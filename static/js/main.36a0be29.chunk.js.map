{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["props","className","operation","style","gridColumn","span","onClick","e","click","label","value","initialState","displayValue","clearDisplay","values","current","Calculator","state","this","setState","equals","currentOperation","n","includes","Number","isInteger","parseInt","i","parseFloat","addDigit","setOperation","op","color","clearMemory","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36a0be29.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nexport default (props) => (\r\n  <button\r\n    className={`button ${props.operation ? \"operation\" : \"\"}`}\r\n    style={{\r\n      gridColumn: \"span \" + props.span || \"span 1\",\r\n    }}\r\n    onClick={(e) => props.click && props.click(props.label)}\r\n  >\r\n    {props.label}\r\n  </button>\r\n);\r\n","import React from \"react\";\r\nimport \"./Display.css\";\r\n\r\nexport default (props) => <div className=\"display\">{props.value}</div>;\r\n","import React, { Component } from \"react\";\r\nimport \"./Calculator.css\";\r\nimport Button from \"../components/Button\";\r\nimport Display from \"../components/Display\";\r\n\r\nconst initialState = {\r\n  displayValue: \"0\",\r\n  clearDisplay: false,\r\n  operation: null,\r\n  values: [0, 0],\r\n  current: 0,\r\n};\r\n\r\nexport default class Calculator extends Component {\r\n  state = { ...initialState };\r\n\r\n  clearMemory() {\r\n    this.setState({ ...initialState });\r\n  }\r\n\r\n  setOperation(operation) {\r\n    if (this.state.current === 0) {\r\n      // Definindo Operação, limpando display, escrevendo segundo numero.\r\n      this.setState({ operation, current: 1, clearDisplay: true });\r\n    } else {\r\n      // Utilizado para identificar que foi pressionado \"=\"\r\n      const equals = operation === \"=\";\r\n\r\n      // Obtendo qual é a operação que foi pressionada.\r\n      const currentOperation = this.state.operation;\r\n\r\n      // Clonando array values.\r\n      const values = [...this.state.values];\r\n\r\n      switch (currentOperation) {\r\n        case \"+\":\r\n          values[0] = values[0] + values[1];\r\n          break;\r\n\r\n        case \"-\":\r\n          values[0] = values[0] - values[1];\r\n          break;\r\n\r\n        case \"*\":\r\n          values[0] = values[0] * values[1];\r\n          break;\r\n\r\n        case \"/\":\r\n          values[0] = values[0] / values[1];\r\n          break;\r\n      }\r\n      values[1] = 0;\r\n\r\n      this.setState({\r\n        displayValue: values[0],\r\n        operation: equals ? null : operation,\r\n        current: equals ? 0 : 1,\r\n        clearDisplay: !equals,\r\n        values,\r\n      });\r\n    }\r\n  }\r\n\r\n  addDigit(n) {\r\n    // Verificando se já foi digitado \".\"\r\n    if (n == \".\" && this.state.displayValue.includes(\".\")) return;\r\n\r\n    // Identificando quando irá limpar a calculadora\r\n    const clearDisplay =\r\n      this.state.displayValue === \"0\" || this.state.clearDisplay;\r\n\r\n    // Identificando se é para limpar o display para não concatenar zero.\r\n    const currentValue = clearDisplay ? \"\" : this.state.displayValue;\r\n    const displayValue = currentValue + n;\r\n\r\n    // JavaScript entende o nome da variavel como atributo do objeto\r\n    this.setState({ displayValue, clearDisplay: false });\r\n\r\n    // Avaliando se é numero\r\n    if (Number.isInteger(parseInt(n))) {\r\n      // Identificando se estou utilizando o valor antes ou depois da operação\r\n      const i = this.state.current;\r\n\r\n      // Utilizando Spread para clonar os dados do Array Existente\r\n      const values = [...this.state.values];\r\n\r\n      // Alterando valor atual da operação\r\n      values[i] = parseFloat(displayValue);\r\n\r\n      // JS já identifica pelo nome da variavel que o atributo \"values\" precisa ser alterado\r\n      this.setState({ values });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const addDigit = (n) => this.addDigit(n);\r\n    const setOperation = (op) => this.setOperation(op);\r\n\r\n    return (\r\n      <div className=\"calculator\">\r\n        <Display value={this.state.displayValue} />\r\n        <Button label=\"AC\" span={3} color=\"\" click={() => this.clearMemory()} />\r\n        <Button label=\"/\" operation click={setOperation} />\r\n        <Button label=\"7\" click={addDigit} />\r\n        <Button label=\"8\" click={addDigit} />\r\n        <Button label=\"9\" click={addDigit} />\r\n        <Button label=\"*\" click={setOperation} operation />\r\n        <Button label=\"4\" click={addDigit} />\r\n        <Button label=\"5\" click={addDigit} />\r\n        <Button label=\"6\" click={addDigit} />\r\n        <Button label=\"-\" click={setOperation} operation />\r\n        <Button label=\"1\" click={addDigit} />\r\n        <Button label=\"2\" click={addDigit} />\r\n        <Button label=\"3\" click={addDigit} />\r\n        <Button label=\"+\" click={setOperation} operation />\r\n        <Button label=\"0\" click={addDigit} span=\"2\" />\r\n        <Button label=\".\" click={addDigit} />\r\n        <Button label=\"=\" click={setOperation} operation />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Calculadora from \"./main/Calculator\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <>\n    <h1>Calculadora</h1>\n    <Calculadora />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}